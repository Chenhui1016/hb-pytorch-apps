[
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mean(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::select(const at::Tensor&, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sqrt(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::relu(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mean(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::select(const at::Tensor&, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sqrt(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::relu(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::max_pool2d(const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mean(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::select(const at::Tensor&, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sqrt(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::relu(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::max_pool2d(const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mean(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::select(const at::Tensor&, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::slice(const at::Tensor&, int64_t, int64_t, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sqrt(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::sub(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::relu(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::max_pool2d(const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::view(const at::Tensor&, c10::IntArrayRef)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::t(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::matmul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::log_softmax(const at::Tensor&, int64_t, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "int64_t at::TypeDefault::size(const at::Tensor&, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::nll_loss(const at::Tensor&, const at::Tensor&, const at::Tensor&, int64_t, int64_t)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::ones_like(const at::Tensor&, const c10::TensorOptions&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::nll_loss_backward(const at::Tensor&, const at::Tensor&, const at::Tensor&, const at::Tensor&, int64_t, int64_t, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::_log_softmax_backward_data(const at::Tensor&, const at::Tensor&, int64_t, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::t(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mm(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::t(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::t(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mm(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::t(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::reshape(const at::Tensor&, c10::IntArrayRef)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::max_pool2d_with_indices_backward(const at::Tensor&, const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::threshold_backward(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::to(const at::Tensor&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::div(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::max_pool2d_with_indices_backward(const at::Tensor&, const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::threshold_backward(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::to(const at::Tensor&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::div(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::max_pool2d_with_indices_backward(const at::Tensor&, const at::Tensor&, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, bool, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::threshold_backward(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::to(const at::Tensor&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::div(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::threshold_backward(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::div(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::mul(const at::Tensor&, const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::neg(const at::Tensor&)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::mul(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::sum(const at::Tensor&, c10::IntArrayRef, bool, c10::optional<c10::ScalarType>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::expand(const at::Tensor&, c10::IntArrayRef, bool)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::to(const at::Tensor&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::TypeDefault::div(const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::add(const at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    },
    {
        "offload": false,
        "signature": "at::Tensor at::CPUType::{anonymous}::clone(const at::Tensor&, c10::optional<c10::MemoryFormat>)"
    },
    {
        "offload": false,
        "signature": "at::Tensor& at::CPUType::{anonymous}::add_(at::Tensor&, const at::Tensor&, c10::Scalar)"
    }
]

